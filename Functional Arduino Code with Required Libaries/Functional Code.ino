#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/fa6658c8-73c7-4a1c-b57c-180383b97aa6 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float weight;
  CloudSwitch feed;
  int reset_counter;
  bool change;
  bool maintenance;
  bool no_Food;
  bool reset_Weight;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

// Including All required Libaries to allow the code to work. 
// Download required libary in Arduino IDE
#include "thingProperties.h"
#include <HX711_ADC.h> 
HX711_ADC LoadCell(4, 5);

// Defining Variables
int motorpin1 = 6; 
int motorpin2 = 7;
bool i;
float x = 35; //Adjust for weight Calibration
int counter = 0;
int Timer = 0;
bool Timer_Start;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  reset_counter = 0;
  //Setting motor pin mode
  pinMode(motorpin1, OUTPUT);
  pinMode(motorpin2, OUTPUT);
  
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
   
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  LoadCell.begin(); // start connection to HX711
  LoadCell.start(2000); // load cells gets 1000ms of time to stabilize
  /////////////////////////////////////
  LoadCell.setCalFactor(x); // Calibarate your LOAD CELL with 100g weight, and change the value according to readings
  /////////////////////////////////////
  delay(1500);
}

/////////////////////////////////////////////////////////////////////////////////////////////
void loop() {
  
 ArduinoCloud.update();
  
 LoadCell.update(); // retrieves data from the load cell
 weight = LoadCell.getData()* -1; // get output value
   //Serial.println(weight); for testing
   //Serial.println(Timer); for testing
  no_Food = false;
  
  
  if (weight<=0){
  weight = 0;
  }

    if (Timer_Start == true){
      Timer++;
    }

    if (Timer == 10000){
    //Serial.println("Weight has restarted");  for testing
       LoadCell.begin();
  // Add your code here to act upon ResetWeight change
   LoadCell.start(2000); // load cells gets 1000ms of time to stabilize
  /////////////////////////////////////
  LoadCell.setCalFactor(x); // Calibarate your LOAD CELL with 100g weight, and change the 
      Timer_Start = false;
      Timer = 0;
      reset_counter = reset_counter + 1;
    }
  }

////////////////////////////////////////////////////////////////////////////////////


/*
  Since Feed is READ_WRITE variable, onFeedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFeedChange()  {
  
  feed == true;
   i = true;
   Timer_Start = true; 
  //  Timer_Start = true;
  //Serial.println(weight);
    if (feed == true){
      analogWrite(motorpin1, 0);
      analogWrite(motorpin2, 255);
      delay(1500);
      analogWrite(motorpin1, 0);
      analogWrite(motorpin2, 0);
      feed == false;
  }
  
   LoadCell.update(); // retrieves data from the load cell

   weight = LoadCell.getData()* -1; // get output value
  if (weight<=0){
  weight = 0;
 }
  while (i == true){
     counter++; // Used for a short amount of time to activate the if loops and conditions
     //Serial.println(weight); // only for debugging CODE! Turn off when done
     LoadCell.update(); // retrieves data from the load cell
     weight = LoadCell.getData()*-1; // get output value
    
      //Serial.println(counter); // only for debugging CODE! Turn off when done
     
     delay(380);
     
    if (weight <=20 && counter == 6 ){
      i = false;
      no_Food = true;
      counter = 0;
     // Serial.println(weight); // only for debugging CODE! Turn off when done
    }
      
    else if (weight >=21 && counter == 6 ){
      i=false;
      counter=0;
     // Serial.println(weight); // only for debugging CODE! Turn off when done
    }
  } 
}
  


 

/*
  Since ResetWeight is READ_WRITE variable, onResetWeightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onResetWeightChange()  {
 
  reset_Weight == true;
  
  if (reset_Weight == true ){
    LoadCell.begin();
  // Add your code here to act upon ResetWeight change
   LoadCell.start(2000); // load cells gets 1000ms of time to stabilize
  /////////////////////////////////////
  LoadCell.setCalFactor(x); // Calibarate your LOAD CELL with 100g weight, and change the 
    reset_Weight == false;
    change = false;
    i = false;
    Timer_Start = false;
    Timer = 0;
    reset_counter = 0;
  }
}

/*
  Since NoFood is READ_WRITE variable, onNoFoodChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onNoFoodChange()  {
  
  
}


/*
  Since Weight is READ_WRITE variable, onWeightChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onWeightChange()  {
  // Add your code here to act upon Weight change
}











/*
  Since Maintenance is READ_WRITE variable, onMaintenanceChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMaintenanceChange()  {
  // Add your code here to act upon Maintenance change
  maintenance == true;
  if (maintenance == true){
      analogWrite(motorpin1, 0);
      analogWrite(motorpin2, 255);
      delay(10000);
      analogWrite(motorpin1, 0);
      analogWrite(motorpin2, 0);
      maintenance == false;
  }
}